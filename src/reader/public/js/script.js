document.addEventListener("DOMContentLoaded", async () => {
  await loadFileTree();
  await loadBookmarks();
  await checkLastRead();
});

/** üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ */
async function loadFileTree() {
  try {
    const response = await fetch('/api/files');
    const data = await response.json();
    const fileList = document.getElementById('file-list');
    fileList.innerHTML = '';

    function createTreeNode(node) {
      const li = document.createElement('li');

      if (node.type === 'folder') {
        const folderSpan = document.createElement('span');
        folderSpan.textContent = node.name; 
        folderSpan.classList.add('folder-icon');
        folderSpan.style.cursor = 'pointer';
        folderSpan.onclick = () => toggleFolder(li, node.children);

        const ul = document.createElement('ul');
        ul.style.display = 'none';
        li.appendChild(folderSpan);
        li.appendChild(ul);
      } else if (node.type === 'file') {
        const link = document.createElement('a');
        link.textContent = node.name;
        link.href = '#';
        link.classList.add('file-icon');
        link.onclick = (event) => {
          event.preventDefault(); // ‚õîÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ
          loadFileContent(node.path);
        };
        li.appendChild(link);
      }

      return li;
    }

    function toggleFolder(li, children) {
      const ul = li.querySelector('ul');
      if (!ul.hasChildNodes()) {
        children.forEach(child => ul.appendChild(createTreeNode(child)));
      }
      ul.style.display = ul.style.display === 'none' ? 'block' : 'none';
    }

    fileList.appendChild(createTreeNode(data));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', error);
  }
}

/** üìå –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Markdown-—Ñ–∞–π–ª–∞ */
async function loadFileContent(filePath) {
  try {
    console.log(`üìÑ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª: ${filePath}`);

    const response = await fetch(`/api/content?file=${encodeURIComponent(filePath)}`);
    if (!response.ok) throw new Error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');

    const content = await response.text();
    document.querySelector('.article-container').innerHTML = `
      ${content}
      <br>
      <button onclick="addBookmark('${filePath}')">‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏</button>
    `;

    // ‚úÖ –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫–æ–¥–∞
    document.querySelectorAll('pre code').forEach((block) => {
      hljs.highlightElement(block);
    });

    await fetch(`/api/saveProgress?file=${encodeURIComponent(filePath)}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
  }
}

/** üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–ª–∞–¥–∫–∏ */
async function loadBookmarks() {
  try {
    const response = await fetch('/api/bookmarks');
    const data = await response.json();
    const bookmarkList = document.getElementById('bookmark-list');
    bookmarkList.innerHTML = '';

    data.forEach(bookmark => {
      const li = document.createElement('li');
      const link = document.createElement('a');
      link.textContent = bookmark;
      link.href = '#';
      link.onclick = (event) => {
        event.preventDefault();
        loadFileContent(bookmark);
      };
      link.classList.add('bookmark-icon'); // –ö–ª–∞—Å—Å –¥–ª—è –∏–∫–æ–Ω–∫–∏ –∑–∞–∫–ª–∞–¥–æ–∫
      li.appendChild(link);
      bookmarkList.appendChild(li);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–ª–∞–¥–æ–∫:', error);
  }
}

/** üìå –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∑–∞–∫–ª–∞–¥–∫–∏ */
async function addBookmark(filePath) {
  await fetch(`/api/addBookmark?file=${encodeURIComponent(filePath)}`);
  loadBookmarks();
}

/** üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª */
async function checkLastRead() {
  try {
    const response = await fetch('/api/lastRead');
    const data = await response.json();
    const lastRead = data.lastRead;

    if (lastRead) {
      const btn = document.getElementById('continue-reading');
      btn.style.display = "block";
      btn.onclick = () => loadFileContent(lastRead);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', error);
  }
}