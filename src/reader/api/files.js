import fs from 'fs/promises';
import path from 'path';

export async function getCourseFiles(req, res) {
  const courseDir = path.join(process.cwd(), 'my-course', 'course');

  async function readDirectory(dir, relativePath = '') {
    let files;
    try {
      files = await fs.readdir(dir, { withFileTypes: true });
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏: ${dir}`, error);
      return [];
    }

    // ‚úÖ –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ —á–∏—Å–ª–∞–º –∏ –∞–ª—Ñ–∞–≤–∏—Ç—É
    files.sort((a, b) => {
      const aMatch = a.name.match(/^(\d+)/);
      const bMatch = b.name.match(/^(\d+)/);
      const aNum = aMatch ? parseInt(aMatch[1], 10) : Infinity;
      const bNum = bMatch ? parseInt(bMatch[1], 10) : Infinity;
      return aNum - bNum || a.name.localeCompare(b.name, 'ru', { numeric: true });
    });

    return Promise.all(
      files.map(async (file) => {
        const filePath = path.join(dir, file.name);
        const relativeFilePath = path.join(relativePath, file.name);

        if (file.isDirectory()) {
          return {
            name: `üìÅ ${file.name}`,
            path: relativeFilePath,
            type: 'folder',
            children: await readDirectory(filePath, relativeFilePath) // üìÅ –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
          };
        } else if (file.name.endsWith('.md')) {
          return {
            name: `üìÑ ${file.name.replace('.md', '')}`,
            path: relativeFilePath,
            type: 'file'
          };
        }
        return null; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
      })
    ).then((items) => items.filter(Boolean)); // –£–±–∏—Ä–∞–µ–º `null` –∏–∑ –º–∞—Å—Å–∏–≤–∞
  }

  try {
    const fileTree = await readDirectory(courseDir);
    res.json({ name: 'üìñ –ö—É—Ä—Å', type: 'folder', children: fileTree });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤' });
  }
}
