import fs from 'fs/promises';
import path from 'path';
import { marked } from 'marked';
import hljs from 'highlight.js';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Markdown —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
marked.setOptions({
  highlight: function (code, lang) {
    if (lang && hljs.getLanguage(lang)) {
      return hljs.highlight(code, { language: lang }).value;
    } else {
      return hljs.highlightAuto(code).value;
    }
  }
});

export async function getCourseContent(req, res) {
  try {
    const filePath = req.query.file;
    if (!filePath) {
      return res.status(400).send('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª');
    }

    const decodedFilePath = decodeURIComponent(filePath).trim();
    const courseDir = path.join(process.cwd(), 'my-course', 'course'); // –ü—É—Ç—å –∫ –∫—É—Ä—Å—É
    const resolvedPath = path.join(courseDir, decodedFilePath);

    console.log(`üìÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–π–ª: ${decodedFilePath}`);
    console.log(`üîç –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: ${resolvedPath}`);

    let stat;
    try {
      stat = await fs.stat(resolvedPath);
    } catch {
      console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${resolvedPath}`);
      return res.status(404).send('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (stat.isDirectory()) {
      console.error(`‚ùå –û—à–∏–±–∫–∞: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –∫–∞–∫ —Ñ–∞–π–ª: ${resolvedPath}`);
      return res.status(400).send('‚ùå –û—à–∏–±–∫–∞: –≠—Ç–æ –ø–∞–ø–∫–∞, –∞ –Ω–µ —Ñ–∞–π–ª');
    }

    const content = await fs.readFile(resolvedPath, 'utf8');
    const htmlContent = marked(content);

    res.send(htmlContent);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
    res.status(500).send('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
  }
}
