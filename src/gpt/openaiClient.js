/**
 * üìå –ú–æ–¥—É–ª—å openaiClient.js ‚Äî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI API.
 *
 * üîπ –û–ø–∏—Å–∞–Ω–∏–µ:
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–∑–¥–∞—ë—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è OpenAI API, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª—é—á –∏–∑ `.env` –∏–ª–∏ `config.json`.
 *
 * üîπ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * ```js
 * import { openai } from './openaiClient.js';
 * const response = await openai.chat.completions.create({...});
 * ```
 */

import OpenAI from 'openai';
import 'dotenv/config';
import fs from 'fs';
import path from 'path';

// –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª—é—á –∏–∑ config.json
function getApiKey() {
    const configPath = path.join(process.cwd(), 'config.json'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é

    if (fs.existsSync(configPath)) {
        const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
        if (config.apiKey) {
            return config.apiKey;
        }
    }

    // –§–æ–ª–±—ç–∫ –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    return process.env['OPENAI_API_KEY'];
}

const apiKey = getApiKey();

if (!apiKey) {
    console.error('‚ùå –û—à–∏–±–∫–∞: API-–∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env –∏–ª–∏ config.json.');
    process.exit(1);
}

export const openai = new OpenAI({ apiKey });
