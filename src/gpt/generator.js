import fs from 'fs';
import path from 'path';
import { generateContent } from './generateContent.js';
import { ChatSession } from './chatSession.js';
import { delay } from '../utils/delay.js';

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function loadConfig(projectPath) {
  const configPath = path.join(projectPath, 'config.json');
  if (!fs.existsSync(configPath)) {
    console.error(`‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${configPath}`);
    process.exit(1);
  }
  return JSON.parse(fs.readFileSync(configPath, 'utf8'));
}

// **–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ `course/`**
export async function processDirectory(projectPath, subPath = '') {
  const basePath = path.join(projectPath, 'course'); // –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞ –∫—É—Ä—Å–∞
  const currentPath = subPath ? path.join(basePath, subPath) : basePath; // –ï—Å–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—É—é –ø–∞–ø–∫—É, –¥–æ–±–∞–≤–ª—è–µ–º `subPath`

  if (!fs.existsSync(currentPath)) {
    console.error(`‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${currentPath}`);
    process.exit(1);
  }

  console.log(`üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥: ${currentPath}`);

  let files = fs.readdirSync(currentPath, { withFileTypes: true });

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
  files.sort((a, b) => a.name.localeCompare(b.name, 'ru', { numeric: true }));

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏ –ø—Ä–æ–º—Ç
  const config = loadConfig(projectPath);
  const promptPath = path.join(projectPath, config.prompt_file);

  if (!fs.existsSync(promptPath)) {
    console.error(`‚ùå –§–∞–π–ª —Å –ø—Ä–æ–º—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω: ${promptPath}`);
    process.exit(1);
  }

  const initialPrompt = fs.readFileSync(promptPath, 'utf8').trim();
  const chatSession = new ChatSession(initialPrompt);

  for (const file of files) {
    const filePath = path.join(currentPath, file.name);

    if (file.isDirectory()) {
      console.log(`üìÅ –í—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É: ${filePath}`);
      await processDirectory(projectPath, path.join(subPath, file.name)); // ‚úÖ –¢–µ–ø–µ—Ä—å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏–¥—ë–º –¥–∞–ª—å—à–µ, –Ω–æ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ `course/`
    } else if (file.name.endsWith('.md')) {
      let fileContent = fs.readFileSync(filePath, 'utf8').trim();
      const title = path.basename(file.name, path.extname(file.name));

      if (!fileContent) {
        console.log(`üìÇ –§–∞–π–ª ${file.name} –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.`);
        fileContent = '';
      }

      // –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      const newFileName = `(gen) ${title}${path.extname(file.name)}`;
      const newFilePath = path.join(currentPath, newFileName);

      if (fs.existsSync(newFilePath)) {
        console.log(`‚ö†Ô∏è –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${newFileName}. –ü—Ä–æ–ø—É—Å–∫...`);
        continue;
      }

      console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${filePath}`);

      const generatedContent = await generateContent(chatSession, title, fileContent);

      if (generatedContent) {
        fs.writeFileSync(newFilePath, `# ${title}\n\n${generatedContent}`, 'utf8');
        console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: ${newFileName}`);
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è: ${file.name}`);
      }

      console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º...');
      await delay(config.timeout_ms);
    }
  }
}
